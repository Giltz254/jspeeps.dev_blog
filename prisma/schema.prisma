datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String?         @unique
  emailVerified         DateTime?
  password              String?
  image                 String?
  provider              String?
  username              String?         @unique
  accounts              Account[]
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  role                  UserRole        @default(USER)
  bio                   String?
  website               String?
  twitter               String?
  blog                  Blog[]
  commentClaps          CommentClap[]
  claps                 Clap[]
  bookmarks             Bookmark[]
  comments              Comment[]
  repliedToComments     Comment[]       @relation("ReplyToUser")
  receivedNotifications Notification[]  @relation("NotificationReceived")
  sentNotifications     Notification[]  @relation("NotificationSent")
  followers             Follow[]        @relation("UserAsFollowed")
  followings            Follow[]        @relation("UserAsFollower")
  deviceSessions        DeviceSession[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Blog {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  userId        String         @db.ObjectId
  title         String
  description   String
  isPublished   Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  coverImage    String?
  summary       String?
  searchText    String
  content       Json
  readtime      String?
  tags          String[]
  slug          String         @unique
  claps         Clap[]
  bookmarks     Bookmark[]
  comments      Comment[]
  notifications Notification[]
  featured      Boolean @default(false)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model View {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  blogId    String @db.ObjectId   @unique
  count     Int      @default(0)
  updatedAt DateTime @updatedAt
}
model DeviceSession {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  sessionToken String   @unique
  userAgent    String
  ip           String?
  createdAt    DateTime @default(now())
  lastUsed     DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Clap {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  blogId    String   @db.ObjectId
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
}

model Bookmark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  blogId    String   @db.ObjectId
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
}

model Comment {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  blogId          String         @db.ObjectId
  userId          String         @db.ObjectId
  parentId        String?        @db.ObjectId
  repliedToUserId String?        @db.ObjectId
  content         String
  createdAt       DateTime       @default(now())
  claps           CommentClap[]
  notification    Notification[]
  blog          Blog      @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent        Comment?  @relation("OneLevelThread", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies       Comment[] @relation("OneLevelThread")
  repliedToUser User?     @relation("ReplyToUser", fields: [repliedToUserId], references: [id])
}

model CommentClap {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  commentId String   @db.ObjectId
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([userId, commentId])
}

model Notification {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  recipientId String           @db.ObjectId
  senderId    String           @db.ObjectId
  type        NotificationType
  blogId      String?          @db.ObjectId
  commentId   String?          @db.ObjectId
  entityType  EntityType?
  content     String?
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())
  recipient User @relation("NotificationReceived", fields: [recipientId], references: [id], onDelete: Cascade)
  sender    User @relation("NotificationSent", fields: [senderId], references: [id], onDelete: Cascade)
  blog    Blog?    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String   @db.ObjectId
  followingId String   @db.ObjectId
  createAt    DateTime @default(now())
  follower    User     @relation("UserAsFollower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserAsFollowed", fields: [followingId], references: [id], onDelete: Cascade) 
  @@unique([followerId, followingId])
}

enum NotificationType {
  NEW_COMMENT
  COMMENT_REPLY
  NEW_CLAP
  FOLLOW
  SYSTEM_ALERT
}

enum EntityType {
  BLOG
  COMMENT
  USER
  SYTEM
}
