datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
enum UserRole {
  ADMIN
  USER
}
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  password      String?
  image         String?
  provider      String?
  username      String? @unique
  accounts      Account[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role UserRole @default(USER)
  blog       Blog[]
  deviceSessions DeviceSession[]
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
model VerificationToken {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  email             String
  token             String @unique
  expires           DateTime
  @@unique([email, token])
}
model PasswordResetToken {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  email             String
  token             String @unique
  expires           DateTime
  @@unique([email, token])
}
model Blog {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  title             String
  description       String
  isPublished       Boolean @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  coverImage        String?
  content           Json
  tags              String[]
  slug              String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model DeviceSession {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  sessionToken String   @unique
  userAgent    String
  ip           String?
  createdAt    DateTime @default(now())
  lastUsed     DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}
